#This is a Stochastic Gradient Descent Neural Network

# Setup plotting
import matplotlib.pyplot as plt
#from learntools.deep_learning_intro.dltools import animate_sgd
plt.style.use('seaborn-whitegrid')
# Set Matplotlib defaults
plt.rc('figure', autolayout=True)
plt.rc('axes', labelweight='bold', labelsize='large',
       titleweight='bold', titlesize=18, titlepad=10)
plt.rc('animation', html='html5')

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import make_column_transformer, make_column_selector
from sklearn.model_selection import train_test_split

fuel = pd.read_csv(r"C:\Users\alvar\OneDrive\Escritorio\MLAI Tools\NN\Data\fuel.csv")

X = fuel.copy()
# Remove target
y = X.pop('FE')

preprocessor = make_column_transformer(
    (StandardScaler(),
     make_column_selector(dtype_include=np.number)),
    (OneHotEncoder(sparse=False),
     make_column_selector(dtype_include=object)),
)


#,MedInc,HouseAge,AveRooms,AveBedrms,Population,AveOccup,Latitude,Longitude,MedHouseVal

X = preprocessor.fit_transform(X)
y = np.log(y) # log transform target instead of standardizing

input_shape = [X.shape[1]]
print("Input shape: {}".format(input_shape))

pd.DataFrame(X[:10,:]).head()

from tensorflow import keras
from keras import layers

model = keras.Sequential([
    layers.Dense(128, activation='relu', input_shape=input_shape),
    layers.Dense(128, activation='relu'),    
    layers.Dense(64, activation='relu'),
    layers.Dense(1),
])
#add loss and optimizer
model.compile(
    optimizer='adam',
    loss='mae')
#train model
history = model.fit(
    X, y,
    batch_size=128,
    epochs=200)

import pandas as pd

history_df = pd.DataFrame(history.history)
# Start the plot at epoch 5. You can change this to get a different view.
history_df.loc[5:, ['loss']].plot();

#Evaluate training
#  Experiment with different values for the learning rate, batch size, and number of examples
learning_rate = 0.15
batch_size = 32
num_examples = 256

from keras import callbacks
early_stopping = callbacks.EarlyStopping(
    patience= 5,
    min_delta = 0.001,
    restore_best_weights= True,
)
preds = model.predict(X)
print('Predicted:',preds)
